env:
  CHERE_INVOKING: 1
  MSYS2_PATH_TYPE: minimal
jobs:
  test:
    defaults:
      run:
        shell: bash
    name: test
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout the JDK source
      uses: actions/checkout@v4
    - continue-on-error: true
      if: runner.os == 'Windows'
      name: Get MSYS2
      uses: ./.github/actions/get-msys2
    - continue-on-error: true
      id: bootjdk
      name: Get the BootJDK
      uses: ./.github/actions/get-bootjdk
      with:
        platform: ${{ inputs.bootjdk-platform }}
    - continue-on-error: true
      id: jtreg
      name: Get JTReg
      uses: ./.github/actions/get-jtreg
    - continue-on-error: true
      id: bundles
      name: Get bundles
      uses: ./.github/actions/get-bundles
      with:
        debug-suffix: ${{ matrix.debug-suffix }}
        platform: ${{ inputs.platform }}
    - continue-on-error: true
      if: runner.os == 'macOS'
      name: Install dependencies
      run: '# On macOS we need to install some dependencies for testing

        brew install make

        sudo xcode-select --switch /Applications/Xcode_14.3.1.app/Contents/Developer

        # This will make GNU make available as ''make'' and not only as ''gmake''

        echo ''/usr/local/opt/make/libexec/gnubin'' >> $GITHUB_PATH

        '
    - continue-on-error: true
      id: path
      name: Set PATH
      run: "# We need a minimal PATH on Windows\n# Set PATH to \"\", so just GITHUB_PATH\
        \ is included\nif [[ '${{ runner.os }}' == 'Windows' ]]; then\n  echo \"value=\"\
        \ >> $GITHUB_OUTPUT\nelse\n  echo \"value=$PATH\" >> $GITHUB_OUTPUT\nfi\n"
    - continue-on-error: true
      env:
        PATH: ${{ steps.path.outputs.value }}
      id: run-tests
      name: Run tests
      run: 'make test-prebuilt TEST=''${{ matrix.test-suite }}'' BOOT_JDK=${{ steps.bootjdk.outputs.path
        }} JT_HOME=${{ steps.jtreg.outputs.path }} JDK_IMAGE_DIR=${{ steps.bundles.outputs.jdk-path
        }} SYMBOLS_IMAGE_DIR=${{ steps.bundles.outputs.symbols-path }} TEST_IMAGE_DIR=${{
        steps.bundles.outputs.tests-path }} JTREG=''JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash;VERBOSE=fail,error,time;KEYWORDS=!headful''
        && bash ./.github/scripts/gen-test-summary.sh "$GITHUB_STEP_SUMMARY" "$GITHUB_OUTPUT"

        '
    - continue-on-error: true
      if: always()
      name: Generate test report
      run: bash ./.github/scripts/gen-test-results.sh "$GITHUB_STEP_SUMMARY"
    - continue-on-error: true
      id: package
      if: always()
      name: Package test results
      run: "# Package test-results and relevant parts of test-support\nmkdir results\n\
        \nif [[ -d build/run-test-prebuilt/test-results ]]; then\n  cd build/run-test-prebuilt/test-results/\n\
        \  zip -r -9 \"$GITHUB_WORKSPACE/results/test-results.zip\" .\n  cd $GITHUB_WORKSPACE\n\
        else\n  echo '::warning ::Missing test-results directory'\nfi\n\nif [[ -d\
        \ build/run-test-prebuilt/test-support ]]; then\n  cd build/run-test-prebuilt/test-support/\n\
        \  zip -r -9 \"$GITHUB_WORKSPACE/results/test-support.zip\" . -i *.jtr -i\
        \ */hs_err*.log -i */replay*.log\n  cd $GITHUB_WORKSPACE\nelse\n  echo '::warning\
        \ ::Missing test-support directory'\nfi\n\nartifact_name=\"results-${{ inputs.platform\
        \ }}-$(echo ${{ matrix.test-name }} | tr '/ ' '__')\"\necho \"artifact-name=$artifact_name\"\
        \ >> $GITHUB_OUTPUT\n"
    - continue-on-error: true
      if: always()
      name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.artifact-name }}
        path: results
    - continue-on-error: true
      if: steps.run-tests.outputs.failure == 'true'
      name: Notify about test failures
      uses: actions/github-script@v7
      with:
        script: core.setFailed('${{ steps.run-tests.outputs.error-message }}')
    strategy:
      fail-fast: false
      matrix:
        include:
        - test-name: jdk/tier1 part 1
          test-suite: test/jdk/:tier1_part1
        - test-name: jdk/tier1 part 2
          test-suite: test/jdk/:tier1_part2
        - test-name: jdk/tier1 part 3
          test-suite: test/jdk/:tier1_part3
        - test-name: langtools/tier1
          test-suite: test/langtools/:tier1
        - debug-suffix: -debug
          test-name: hs/tier1 common
          test-suite: test/hotspot/jtreg/:tier1_common
        - debug-suffix: -debug
          test-name: hs/tier1 compiler part 1
          test-suite: test/hotspot/jtreg/:tier1_compiler_1
        - debug-suffix: -debug
          test-name: hs/tier1 compiler part 2
          test-suite: test/hotspot/jtreg/:tier1_compiler_2
        - debug-suffix: -debug
          test-name: hs/tier1 compiler part 3
          test-suite: test/hotspot/jtreg/:tier1_compiler_3
        - debug-suffix: -debug
          test-name: hs/tier1 compiler not-xcomp
          test-suite: test/hotspot/jtreg/:tier1_compiler_not_xcomp
        - debug-suffix: -debug
          test-name: hs/tier1 gc
          test-suite: test/hotspot/jtreg/:tier1_gc
        - debug-suffix: -debug
          test-name: hs/tier1 runtime
          test-suite: test/hotspot/jtreg/:tier1_runtime
        - debug-suffix: -debug
          test-name: hs/tier1 serviceability
          test-suite: test/hotspot/jtreg/:tier1_serviceability
        - debug-suffix: -debug
          test-name: lib-test/tier1
          test-suite: test/lib-test/:tier1
        test-name:
        - jdk/tier1 part 1
        - jdk/tier1 part 2
        - jdk/tier1 part 3
        - langtools/tier1
        - hs/tier1 common
        - hs/tier1 compiler part 1
        - hs/tier1 compiler part 2
        - hs/tier1 compiler part 3
        - hs/tier1 compiler not-xcomp
        - hs/tier1 gc
        - hs/tier1 runtime
        - hs/tier1 serviceability
        - lib-test/tier1
name: Run tests
on:
  repository_dispatch:
    types: trigger-ga___test.yml
